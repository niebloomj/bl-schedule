"""
This type stub file was generated by pyright.
"""

from datetime import date
from typing import Optional

class JewishDate:
    MONTHS = ...
    MONTHS_LIST = ...
    RD = ...
    JEWISH_EPOCH = ...
    CHALAKIM_PER_MINUTE = ...
    CHALAKIM_PER_HOUR = ...
    CHALAKIM_PER_DAY = ...
    CHALAKIM_PER_MONTH = ...
    CHALAKIM_MOLAD_TOHU = ...
    CHESHVAN_KISLEV_KEVIAH = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def gregorian_date(self) -> date:
        ...
    
    @property
    def gregorian_year(self) -> int:
        ...
    
    @gregorian_year.setter
    def gregorian_year(self, year: int): # -> None:
        ...
    
    @property
    def gregorian_month(self) -> int:
        ...
    
    @gregorian_month.setter
    def gregorian_month(self, month: int): # -> None:
        ...
    
    @property
    def gregorian_day(self) -> int:
        ...
    
    @gregorian_day.setter
    def gregorian_day(self, day: int): # -> None:
        ...
    
    @property
    def day_of_week(self) -> int:
        ...
    
    @property
    def jewish_date(self) -> (int, int, int):
        ...
    
    @property
    def jewish_year(self) -> int:
        ...
    
    @jewish_year.setter
    def jewish_year(self, year: int): # -> None:
        ...
    
    @property
    def jewish_month(self) -> int:
        ...
    
    @jewish_month.setter
    def jewish_month(self, month: int): # -> None:
        ...
    
    @property
    def jewish_day(self) -> int:
        ...
    
    @jewish_day.setter
    def jewish_day(self, day: int): # -> None:
        ...
    
    @property
    def molad_hours(self) -> int:
        ...
    
    @property
    def molad_minutes(self) -> int:
        ...
    
    @property
    def molad_chalakim(self) -> int:
        ...
    
    date = ...
    @classmethod
    def from_molad(cls, molad: int) -> JewishDate:
        ...
    
    @classmethod
    def from_jewish_date(cls, year: int, month: int, date: int) -> JewishDate:
        ...
    
    @classmethod
    def from_date(cls, date: date) -> JewishDate:
        ...
    
    def reset_date(self) -> JewishDate:
        ...
    
    def set_jewish_date(self, year: int, month: int, day: int, hours: int = ..., minutes: int = ..., chalakim: int = ...): # -> None:
        ...
    
    def set_gregorian_date(self, year: int, month: int, day: int): # -> None:
        ...
    
    def forward(self, increment: int = ...) -> JewishDate:
        ...
    
    def back(self, decrement: int = ...) -> JewishDate:
        ...
    
    def __add__(self, addend) -> JewishDate:
        ...
    
    def __sub__(self, subtrahend): # -> JewishDate:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def days_in_gregorian_year(self, year: Optional[int] = ...) -> int:
        ...
    
    def days_in_gregorian_month(self, month: Optional[int] = ..., year: Optional[int] = ...) -> int:
        ...
    
    def is_gregorian_leap_year(self, year: Optional[int] = ...) -> bool:
        ...
    
    def months_in_jewish_year(self, year: Optional[int] = ...) -> int:
        ...
    
    def sorted_months_in_jewish_year(self, year: Optional[int] = ...) -> list:
        ...
    
    def sorted_days_in_jewish_year(self, year: Optional[int] = ...) -> list:
        ...
    
    def days_in_jewish_year(self, year: Optional[int] = ...) -> int:
        ...
    
    def days_in_jewish_month(self, month: Optional[int] = ..., year: Optional[int] = ...) -> int:
        ...
    
    def day_number_of_jewish_year(self, year: Optional[int] = ..., month: Optional[int] = ..., day: Optional[int] = ...) -> int:
        ...
    
    def is_cheshvan_long(self, year: Optional[int] = ...) -> bool:
        ...
    
    def is_cheshvan_short(self, year: Optional[int] = ...) -> bool:
        ...
    
    def is_kislev_long(self, year: Optional[int] = ...) -> bool:
        ...
    
    def is_kislev_short(self, year: Optional[int] = ...) -> bool:
        ...
    
    def is_jewish_leap_year(self, year: Optional[int] = ...) -> bool:
        ...
    
    def cheshvan_kislev_kviah(self, year: Optional[int] = ...) -> str:
        ...
    
    def kviah(self, year: Optional[int] = ...) -> tuple:
        ...
    
    def molad(self, month: int = ..., year: Optional[int] = ...) -> JewishDate:
        ...
    
    def jewish_month_name(self, month: Optional[int] = ...) -> str:
        ...
    
    def jewish_month_from_name(self, month_name: str) -> int:
        ...
    


